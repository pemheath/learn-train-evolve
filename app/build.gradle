/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '3.2.0'
}


repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/NSS-Software-Engineering/shared-java")
        credentials {
            username = project.findProperty('GH_PACKAGE_REG_READ_USER') ?: System.getenv('GH_PACKAGE_REG_READ_USER')
            password = project.findProperty('GH_PACKAGE_REG_READ_PASS') ?: System.getenv('GH_PACKAGE_REG_READ_PASS')
        }
    }
}


dependencies {

    implementation 'com.nashss.se.shared-java:test-infrastructure:1.+'
    implementation 'com.nashss.se.shared-java:nss-resources:1.+'
    implementation 'com.nashss.se.shared-java:lesson-plan-resources:1.+'
    implementation 'com.nashss.se.shared-java:java-project-resources:1.+'

    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.google.dagger:dagger:2.42'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.42'
    implementation 'com.google.code.gson:gson:2.+'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.+'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.+'

    //Logging
    
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'

    //Testing with Mockito
    
    implementation 'org.mockito:mockito-core:4.+'
    implementation "org.mockito:mockito-inline:4.+"

    //Cognito groups
    implementation 'org.bitbucket.b_c:jose4j:0.9.3'
    //AWS


    implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
    implementation 'com.amazonaws:aws-java-sdk-cloudwatch:1.12.+'
    implementation 'com.amazonaws:aws-java-sdk-dynamodb:1.12.+'
    implementation 'com.amazonaws:aws-java-sdk-cognitoidp:1.12.+'

    //secrets

    implementation platform('software.amazon.awssdk:bom:2.20.56')
    implementation 'software.amazon.awssdk:secretsmanager:'
    implementation 'software.amazon.awssdk:sso'
    implementation 'software.amazon.awssdk:ssooidc'

    implementation 'javax.measure:unit-api:2.1.3'

    implementation 'org.mockito:mockito-core:4.+'
    implementation "org.mockito:mockito-inline:4.+"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    //Google integration
    implementation 'com.google.api-client:google-api-client:2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-calendar:v3-rev20220715-2.0.0'
}

application {
    // Define the main class for the application.
    mainClass = 'LearnTrainEvolve.App'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += '-Xlint:deprecation'
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/${name}.exec")
    }
}

//
//// Applies Checkstyle plugin quality checks on projectâ€™s Java source files and generates reports from these checks.
//checkstyle {
//    toolVersion '8.17'
//
//    // Expect the checkstyle config to be in a either the current directory or
//    //  a parent, grandparent or great-grandparent directory of the root project
//    // NOTE: The purpose of putting checkstyle config in a higher directory is to
//    //       share the same config among multiple projects.
//    def configFilePath = 'checkstyle/checkstyle.xml'
//    for (int attempts = 0; attempts < 4; attempts++) {
//        configFile = rootProject.file(configFilePath)
//
//        if (configFile.exists()) {
//            break;
//        }
//
//        configFilePath = '../' + configFilePath
//    }
//
//    def checkstyleDir = configFile.toPath().parent
//    def suppressionFile = new File("$checkstyleDir/unit3/suppressions.xml")
//    configProperties.put('checkstyle.suppression.filter', suppressionFile) // This property is refereced in `checkstyle.xml`
//
//    sourceSets = [sourceSets.main]
//}
//
//// If we are running the task 'staticchecks', do not ignore failures, otherwise ignore
//checkstyleMain.doFirst {
//    ignoreFailures = !gradle.taskGraph.allTasks.any({ it.name ==~ /.*staticchecks/ })
//}
//
//check.dependsOn jacocoTestCoverageVerification
//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            limit {
//                //minimum = 0.8
//                minimum = 0.0
//            }
//        }
//    }
//}
//
//

