{
  "openapi": "3.0.3",
  "info": {
    "title": "Learn Train Evolve",
    "description": "API for Learn Train Evolve Jiu Jitsu Management System.",
    "contact": {
      "email": "pem.heath@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.1"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "training",
      "description": "Everything about training sessions"
    },
    {
      "name": "goals",
      "description": "Access to crud functionality for goals, user access only"
    },
    {
      "name": "user-training",
      "description": "Operations about user training sessions"
    },
    {
      "name": "learn",
      "description": "Operations for viewing and updating resources"
    },
    {
      "name": "notes",
      "description": "Operations relating to the crud operations around notes."
    }
  ],

  "paths": {

    "/training-sessions": {
      "post": {
        "tags": [
          "training"
        ],
        "summary": "Allows the user to sync training sessions from the Google Calendar or other third party service",
        "description": "Used to add training sessions to Training Session table in DynamoDB.",
        "operationId": "SyncTrainingSessions",
        "parameters": [
          {"name":"googleCalId",
            "in":"path",
            "description": "The value of the calendar to pull data from",
            "required": true
            }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Invalid calendar ID supplied"
          },
          "403": {
            "description": "User not an authorized to perform this task"
          }
        }
      },
      "get": {
        "tags": [
          "training"
        ],
        "summary": "View all training sessions.",
        "description": "By default, returns all training sessions available in the next seven days",
        "operationId": "viewAllTraining",
        "parameters" : [
          {
            "name": "type",
            "in":"query",
            "description": "An optional parameter to only see upcoming training sessions for a specific type of class",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrainingSession"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/training-sessions/{eventId}": {
      "get": {
        "tags": ["training"],
        "summary": "shows one training session",
        "description": "",
        "operationId": "viewTrainingSession",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId of event to view",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainingSession"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["training"],
        "summary": "updates one training session",
        "description": "",
        "operationId": "updateTrainingSession",
        "parameters": [
          {
            "name": "eventId",
            "description": "event Id to update",
            "in": "path",
            "required": true
          }
        ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainingSession"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TrainingSession"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "invalid information supplied"
            }
          }
      }
    },

    "/user-training-sessions/": {
      "post": {
        "tags": ["user-training"],
        "summary": "Creates a user-training-session with a unique id and email",
        "operationId": "createUserTrainingSession",
        "requestBody": {
          "description": "updated training  object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTrainingSession"
              }
            }
          }

        },
        "responses": {
          "200" : {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTrainingSession"
                }
              }
            }
          },
          "400" : {
            "description": "invalid eventID or email supplied"
          }
        }
      }
    },

    "/user-training-sessions/{email}": {
      "get": {
        "tags": [
          "user-training"
        ],
        "summary": "View  user training sessions for given user.",
        "description": "",
        "operationId": "viewAllUserTraining",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "user email for user to pull training sessions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in" : "query",
            "required": false,
            "description": "Optional query parameter if the user wants to view only Advanced classes or only Basics classes, for example",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "required": false,
            "description": "Optional query parameters if the user wants to only see training sessions from a certain year",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTrainingSession"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user-training-sessions/{email}/{eventId}": {
      "get": {
        "tags": [
          "user-training"
        ],
        "summary": "View one user training session",
        "description": "View the details of one training session for one user, can only be done by the logged in user",
        "operationId": "viewTrainingDetails",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email of user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MPH6746"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "id of training session to view",
            "required": true,
            "schema": {
              "type": "string",
              "example": "03232023A"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTrainingSession"
                }
              }
            }
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "nonexistent user or training session matching inputs"
          }
        }
      },
      "delete": {
        "tags": [
          "user-training"
        ],
        "summary": "delete one user training session",
        "description": "",
        "operationId": "deleteTrainingSession",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email of user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MPH6746"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "id of training session to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "03232023A"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTrainingSession"
                }
              }
            }
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "nonexistent user or training session matching inputs"
          }
        }
      },
      "put": {
        "tags": [
          "user-training"
        ],
        "summary": "Update one user training session",
        "description": "this endpoint allows a user to update information their training session ",
        "operationId": "updateUserTrainingSession",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email of user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MPH6746"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "id of training session to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "03232023A"
            }
          }
        ],
        "requestBody": {
          "description": "updated User Training Session  object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTrainingSession"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTrainingSession"
                }
              }
            }
          },
          "400": {
            "description": "invalid parameters"
          },
          "404": {
            "description": "nonexistent training session"
          }
        }
      }
    },

    "/notes": {
      "post": {
        "tags": [
          "notes"
        ],
        "summary": "Create a new note",
        "description": "A new note with user email, note number, and note title required",
        "operationId": "createNote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "400": {
            "description": "Invalid inputs"
          }
        }
      }
    },
    "/notes/{email}": {
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Fetch all notes for a user",
        "description": "Returns a list of notes",
        "operationId": "getNotesForUser",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email of user to return notes for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "Notes not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "notes"
        ],
        "summary": "Deletes a note",
        "description": "delete a note",
        "operationId": "deleteNote",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email of user deleting their note",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteNumber",
            "in": "query",
            "description": "note number to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid note id"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserTrainingSession": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "pem.heath@gmail.com"
          },
          "eventId": {
            "type": "string",
            "example": "03042023Advanced"
          },
          "type": {
            "type": "string",
            "example": "Advanced Gi"
          },
          "intensityRating" : {
            "type": "number",
            "description": "user rating for that class",
            "example": "7.5"
          },
          "techniqueEnjoyment" : {
            "type": "number",
            "description": "Enjoyment of the technique taught in class, Leichardt scale 1 to 5",
            "example": "4"
          },
          "performanceRating": {
            "type": "number",
            "description": "Self evaluation of performance on Leichard scale 1 to 5",
            "example": "5"
          },
          "noteNumber": {
            "type": "number",
            "description": "note number corresponding for a note for that training session",
            "example": "3"
          },
          "tags": {
            "type": "object",
            "description": "tags to associate with the training session, in a set<string>",
            "example": "spider guard"
          },
          "attended": {
            "type": "boolean",
            "description": "true if the user attended the class",
            "example": true
          }
        }
      },

      "TrainingSession" : {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "eventId for the training session"
          },
          "start": {
            "type": "string",
            "description": "JSON deserialized start date and time"
          },
          "end": {
            "type": "string",
            "description": "JSON deserialized end date and time"
          },
          "type": {
            "type": "string",
            "description": "type of class",
            "example": "Advanced"
          },
          "isCancelled": {
            "type": "boolean",
            "description": "true if the class was cancelled",
            "example": false
          }
        }
      },
      "Goal": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "pem.heath@gmail.com"
          },
          "goalNumber": {
            "type": "number",
            "example": 2
          },
          "goalTitle": {
            "type": "string",
            "example": "Sweeps from Half guard."
          },
          "goalContent": {
            "type": "string",
            "example": "Add three sweeps from half guard to my game in the next two months."
          },
          "goalStatus": {
            "type": "string",
            "example": "In Progress"
          },
          "taskList": {
            "type": "object",
            "description": "set of strings"
          },
          "tags": {
            "type": "object",
            "description": "set of strings"
          },
          "dateCreated": {
            "type": "string",
            "description": "date-time"
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "pem.heath@gmail.com"
          },
          "noteNumber": {
            "type": "number",
            "example": 2
          },
          "noteTitle": {
            "type": "string",
            "example": "wins!"
          },
          "noteContent": {
            "type": "string",
            "example": "I finally finished a round with Jim without getting tapped out! I think focusing on control let that happen."
          },
          "dateCreated": {
            "type": "string",
            "description": "date-time"
          },
          "tags": {
            "type": "object"
          },
          "eventId": {
            "type": "string",
            "description": "corresponding eventId to associate with note <optional>",
            "example": "34"
          }
        }
      }
    },
    "requestBodies": {
      "UserTrainingSession": {
        "description": "User object that needs to be added or updated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserTrainingSession"
            }
          }
        }
      },
      "TrainingSession": {
        "description": "training session to be added or updated",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/components/schemas/TrainingSession"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "admin_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize??",
            "scopes": {
              "write:trainingSessions": "add training sessions to academy account",
              "read:users": "read your users"
            }
          }
        }
      },
      "user_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize??",
            "scopes": {
              "write:users": "create and update userTrainingSessions, create and update notes/goals in your account",
              "read:users": "read your goals, notes, and training sessions"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}