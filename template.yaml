AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Learn Train Evolve Service 

Parameters:

  CognitoDomain:
    Type: String
    Description: A name for the cognito Domain

  S3Bucket:
    Type: String
    Description: Parameter to specify the S3 Bucket to use for deployment

  FrontendDeployment:
    Default: remote
    Type: String
    AllowedValues:
      - local
      - remote
    ConstraintDescription: Must specify 'local' or 'remote' for FrontendDeployment.

Conditions:
  DeployCloudFront: !Equals
    - !Ref FrontendDeployment
    - remote

Globals:
  Function:
    Timeout: 20

  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'content-type,authorization'"
      AllowOrigin: "'*'"
    Auth:
      # Make all api endpoints use the CognitoAuthorizer by default
      # Individual lambda functions can override this default
      #  to specify either no authorizer or the admin authorizer
      DefaultAuthorizer: CognitoAuthorizer
      AddDefaultAuthorizerToCorsPreflight: false
      Authorizers:
        # This is the built-in cognito authorizer.
        # It ensures the user exists in cognito and that their JWT is valid.
        CognitoAuthorizer:
          UserPoolArn: !GetAtt UserPool.Arn
        # This lambda function is defined below.
        # It ensures the user/JWT is valid and requires the user to be in the 'admin' cognito group.
        AdminLambdaAuthorizer:
          FunctionArn: !GetAtt AdminLambdaAuthorizer.Arn

Resources:

  #-----------------------------------------------------
  # Cognito Configuration for user management
  #-----------------------------------------------------

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${CognitoDomain}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:8000
        - !If
          - DeployCloudFront
          - !Sub "https://${CloudfrontDistribution.DomainName}"
          - !Ref "AWS::NoValue"
      LogoutURLs:
        - http://localhost:8000
        - !If
          - DeployCloudFront
          - !Sub "https://${CloudfrontDistribution.DomainName}"
          - !Ref "AWS::NoValue"
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref UserPool

  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admin
      Description: "A group granting administrative privileges to its users"
      UserPoolId: !Ref UserPool


  #-----------------------------------------------------
  # CloudFront Configuration
  #-----------------------------------------------------

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Condition: DeployCloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless frontend website'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: DeployCloudFront
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !Sub "${S3Bucket}.s3.us-east-2.amazonaws.com"
            OriginPath: /static
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployCloudFront
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        # Restricting access to cloudfront only.
        Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"


  #-----------------------------------------------------
  # Role/Permissions/Policy Configuration
  #-----------------------------------------------------

  AccessRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'WriteToCloudWatch'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: 'AccessTrainingSessionsTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/training_sessions"

        - PolicyName: 'AccessUserTrainingSessionsTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/user_training_sessions"

  AuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CognitoAdminGetUser'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                Resource: 'arn:aws:cognito-idp:us-east-2:*'

  #-----------------------------------------------------
  # Authorizing Lambda Functions Configuration
  #-----------------------------------------------------

  # Admin Lambda Authorizer - ensures the user is in the 'admin' group.
  #
  # The 'LambdaAuthorizer' is generic and can be used to ensure the user is in any group.
  # The group to check comes from the REQUIRED_GROUP environment variable.
  # If you have more than one group that a user might be in, you can copy/paste this block of YAML
  #  and modify it accordingly. You'll need to rename it and update the REQUIRED_GROUP variable.
  AdminLambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AuthorizerRole.Arn
      CodeUri: app
      Handler: learntrainevolve.lambda.infrastructure.auth.LambdaAuthorizer::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          COGNITO_REGION: !Ref AWS::Region
          COGNITO_USER_POOL_ID: !Ref UserPool
          COGNITO_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          REQUIRED_GROUP: "admin"


    #-----------------------------------------------------
    # Lambda Functions Configuration
    #-----------------------------------------------------


  CreateUserTrainingSessionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: learntrainevolve.lambda.CreateUserTrainingSessionLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        app:
          Type: Api
          Properties:
            Path: /user-training-sessions
            Method: post
            Auth:
              Authorizer: 'NONE'

  GetTrainingSessionsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: learntrainevolve.lambda.GetTrainingSessionsLambda
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        app:
          Type: Api
          Properties:
            Path: /training-sessions
            Method: get
            Auth:
              Authorizer: 'NONE'

  LogTrainingLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: learntrainevolve.lambda.LogTrainingLambda
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        app:
          Type: Api
          Properties:
            Path: /user-training-sessions/{email}/{eventId}
            Method: put
            Auth:
              Authorizer: 'NONE'

  SyncTrainingSessionsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: learntrainevolve.lambda.SyncTrainingSessionsLambda
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        app:
          Type: Api
          Properties:
            Path: /training-sessions
            Method: post
            Auth:
              Authorizer: 'NONE'

  GetUserTrainingSessionsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: learntrainevolve.lambda.GetUserTrainingSessionsLambda
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        app:
          Type: Api
          Properties:
            Path: /user-training-sessions/{email}
            Method: get
            Auth:
              Authorizer: 'NONE'

    #-----------------------------------------------------
    # DynamoDB Configuration
    #-----------------------------------------------------

  TrainingSessionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "eventId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "eventId"
            KeyType: "HASH"
        BillingMode: "PAY_PER_REQUEST"
        TableName: "training_sessions"

  UserTrainingSessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "email"
            AttributeType: "S"
          - AttributeName: "eventId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "email"
            KeyType: "HASH"
          - AttributeName: "eventId"
            KeyType: "RANGE"
        BillingMode: "PAY_PER_REQUEST"
        TableName: "user_training_sessions"

  #-----------------------------------------------------
  # The outputs defined below will be printed
  #  to the screen after a successful deploy
  #-----------------------------------------------------

Outputs:

  CognitoUserPoolId:
    Value: !Ref UserPool
    Description: "The Cognito User Pool ID (COGNITO_USER_POOL_ID)."
  CognitoUserPoolClientId:
    Value: !Ref UserPoolClient
    Description: "The Cognito User Pool Client ID (COGNITO_USER_POOL_CLIENT_ID)."
  CognitoDomain:
    Value: !Sub "${CognitoDomain}.auth.us-east-2.amazoncognito.com"
    Description: "The Cognito Domain (COGNITO_DOMAIN)."

  ApiBaseUrl:
    Description: "API Gateway endpoint base URL for Prod stage (API_BASE_URL)."
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  CognitoRedirectSignin:
    Description: "The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNIN)."
    Value: !Sub "https://${CloudfrontDistribution.DomainName}"
    Condition: DeployCloudFront
  CognitoRedirectSignout:
    Description: "The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNOUT)."
    Value: !Sub "https://${CloudfrontDistribution.DomainName}"
    Condition: DeployCloudFront




